/*!
 * Copyright 2010 - 2016 Pentaho Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A `spec.UList` represents the union of JS types that can be used to describe a list value,
 * or the absence of one.
 *
 * Like with all other value types, list values can be described using the general **object form**.
 * The _object form_ conforms to {@link pentaho.type.spec.IList}.
 *
 * List values support an additional form of value specification, the **array form**:
 * an array of {@link pentaho.type.spec.UInstance},
 * each the specification of the corresponding element of the list.
 *
 * Take the following example of a number list in _object form_:
 *
 * ```js
 * {
 *   _: {base: "list", of: "number"},
 *   d: [1, 2, 3]
 * }
 * ```
 *
 * In _array form_, if we assume the type of the list is implied,
 * the same list could be written simply as:
 *
 * ```js
 * [1, 2, 3]
 * ```
 *
 * However, note that _array form_ can only be used if
 * the [inline type]{@link pentaho.type.spec.IInstance#_} property can, in fact, be omitted.
 *
 * A list of complex values can be written in array form,
 * and its complex elements be written in array form,
 * as well. For example:
 *
 * ```js
 * [
 *   ["boeing-737",  1500],
 *   ["airbus-A320", 1000]
 * ]
 * ```
 *
 * When a list value is absent or empty, it can be described with a {@link Nully} JavaScript value:
 *
 * ```js
 * null
 * ```
 *
 * @typedef {pentaho.type.spec.IList|Array.<pentaho.type.spec.UInstance>|Nully} pentaho.type.spec.UList
 */