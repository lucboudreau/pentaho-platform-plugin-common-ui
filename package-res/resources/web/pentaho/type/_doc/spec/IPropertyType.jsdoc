/*!
 * Copyright 2010 - 2016 Pentaho Corporation.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `spec.IPropertyType` interface represents the information used to
 * define a property of a {@link pentaho.type.Complex} type.
 *
 * It is used as part of the {@link pentaho.type.spec.IComplex} specification.
 *
 * To avoid possible confusion,
 * the term _attribute_ is used when referring to a JavaScript property of an `spec.IProperty`.
 *
 * @name pentaho.type.spec.IPropertyType
 *
 * @interface
 *
 * @property {string|Class.<pentaho.type.Value>} [type] The type class of the value of the property.
 *
 * Either `type` or {@link pentaho.type.spec.IPropertyType#name} must be specified.
 *
 * When `type` is unspecified, but `name` is:
 * * If the specified name is the name of an inherited property,
 *   then this property specification overrides it
 *   and the default value is the {@link pentaho.type.Property.type} of the inherited property.
 * * Otherwise, this property specification
 *   defines a new property and
 *   the default value type is {@link pentaho.type.string}.
 *
 * When both are specified and `name` is the name of an inherited property,
 * then `type` must either
 * be the same as that of the inherited property or
 * inherit from it.
 *
 * When `type` is specified, but `name` isn't,
 * it is _defaulted_ using the type's default property names.
 * If this specification defines a _list_ property,
 * according to {@link pentaho.type.spec.IPropertyType#isList},
 * then the default name is {@link pentaho.type.Value#namePlural},
 * and otherwise, it is {@link pentaho.type.Value#name}.
 * It is an error if the resulting name is already the name of an inherited property.
 *
 * @property {string} [name] The name of the property in the declaring complex type.
 *
 * Either `name` or `type` must be specified.
 * See {@link pentaho.type.spec.IPropertyType#type} for more information.
 *
 * @property {boolean?} [isList=false] Indicates if the property is a list property.
 *   List properties can have more than one value,
 *   which is exposed through the "value" property as an array of values.
 *
 * The properties `isList`, `countMin`, `countMax` and `isRequired` are all related,
 * and the values of one affect the other.
 * When multiple of these are specified,
 * the order of precedence is that just enumerated.
 *
 * When `isList` is _specified_ as `false`,
 * then `countMin` and `countMax` are both _limited_ to be less than or equal to `1`.
 *
 * When `isList` is _not specified_, its default value is `false`,
 * whatever the value of the other related property attributes.
 *
 * When `countMin` is _specified_, then `isRequired` is implied to be `countMin >= 1`.
 *
 *
 * @property {number} [countMin] The minimum number of values that this property must have
 *   to be considered specified.
 *
 * When `isList` is `false`, then this property is limited to be _less than or equal_ to `1`.
 *
 * When `countMin`is specified, then `isRequired` is ignored
 * and implied to be `countMin >= 1`.
 *
 * When `countMin` is unspecified, but `isRequired` is specified, then
 * `countMin` is implied to be `isRequired ? 1 : 0`.
 *
 * When both `countMin` and `isRequired` are unspecified,
 * the property is optional, i.e., `countMin` defaults to `0`,
 * and `isRequired` implied to be `false`.
 *
 * The value of `countMax` is limited to be greater than or equal to `countMin`.
 *
 * See `isList` and `countMax` for more information.
 *
 *
 * @property {boolean} [isRequired=false] Indicates if the property must be specified.
 *
 * Ignored when `countMin` is specified.
 *
 * See `countMin` and `isList` for more information.
 *
 *
 * @property {number} [countMax] The maximum number of values that properties of this type can have.
 *
 * A value _greater than or equal_ to the greatest between `1` and `countMin`.
 *
 * When `isList` is `false`, then this property is limited to be _less than or equal_ to `1`.
 *
 * When unspecified, its default value is the _minimum value_ it can take.
 *
 * See `countMin` and `isList` for more information.
 */
